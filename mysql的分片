对用户来说，分区表示一个独立的逻辑表，但是底层由多个物理子表组成。
实现分区的代码实际上是对一组底层表的句柄对象的封装。对分区表的请求，都会通过句柄对象转换成对存储引擎的接口调用。
MYSQL 实现分区表的方式-》 对底层表的封装 -》意味着索引也是按照分区的子表定义，而没有全局索引。
分区的一个主要目的是 将数据按照一个较粗的粒度分在不同的表中。
分区表的索引只是在各个底层表各自加上一个完全相同的索引。之于存储引擎，分区表的底层表与普通表没有区别。

CREATE TABLE sales (
　　order_date DATETIME NOT NULL,
　　-- Other columns omitted
) ENGINE=InnoDB PARTITION BY RANGE(YEAR(order_date)) (
PARTITION p_2010 VALUES LESS THAN (2010),
PARTITION p_2011 VALUES LESS THAN (2011),
PARTITION p_2012 VALUES LESS THAN (2012),
PARTITION p_catchall VALUES LESS THAN MAXVALUE );

PARTITION 分区子句可以使用各种函数。但有一个要求，表达式返回的值要是一个确定的整数，且不能是一个常数。

分区表上的操作按照下面的操作逻辑进行：
　　select查询： 
　　　　当查询一个分区表时，分区表先打开并锁住所有的底层表，优化器先判断是否可以过滤部分分区，然后再调用对应的存储引擎接口访问各个分区的数据。
　　insert操作：
　　　　当写入一条记录时，分区层先打开并锁住所有的底层表，然后确定哪个分区接收这条记录，再将记录写入对应底层表。
　　delete操作：
　　　　当删除一条记录时，分区层先打开并锁住所有的底层表，然后确定数据对应的分区，最后对相应底层表进行删除操作
　　update操作
　　　　当更新一条记录时，分区层先打开并锁住所有的底层表，mysql先确定需要更新的记录在哪个分区，然后取出数据并更新，再判断更新后的数据应该
　　　　放在哪个分区，最后对底层表进行写入操作，并对原数据所在的底层表进行删除操作。
 
 分区表的限制：
　　1.一个表最多1024个分区
　　2.在mysql5.1中，分区表达式必须是整数，或者返回整数的表达式。在mysql5.5中某场景
　　　中可以直接使用列来进行分区。
　　3.如果分区字段中有主键或者唯一索引的列，那么所有主键列和唯一索引列都必须包含起来。
　　4.分区表无法使用外键约束。

场景：
    在数据量超大的时候，B-Tree索引就无法起作用了。
    除非是索引覆盖查询，否则数据库服务器要根据索引扫描的结果回表，查询所有符合条件的记录，如果
    数据量巨大，这将产生大量随机IO，随之，数据库的响应时间将大到不可接受的程度。另外索引维护的代价
    也非常高。这正是需要用到分区的场景。

分区表注意点：
    所有分区都必须使用相同的存储引擎
    分区函数中可以使用的函数和表达式有一定的限制。
    某些存储引擎不支持分区
