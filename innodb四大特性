1.插入缓存/insert buffer
  当按辅助索引插入时先将记录放在Insert Bufert中，然后在后台慢慢的合并回辅助索引页中。当索引不唯一时，就需要使用辅助索引，而记录按主键是顺序的，对其他索
引，如辅助索引，就不会是顺序的，再插入时就会慢，尤其是大批数据插入时。 
Insert Buffer 的设计思想是，当按辅助索引插入时先将记录放在Insert Bufert中，然后在后台慢慢的合并回辅助索引页中。Insert Buffer的数据结构是一颗B+树，其
内存同样使用缓冲池。
2.二次写/double write
  -部分写失效：当数据库正在从内存向磁盘写一个数据页时，数据库宕机，从而导致这个页只写了部分数据。
  -二次写：
  1）当刷新缓冲池脏页时，并不直接写到数据文件中，而是先拷贝至内存中的两次写缓冲区。
  2）接着从两次写缓冲区分两次写入磁盘共享表空间中，每次写入1MB
  3）待第2步完成后，再将两次写缓冲区写入数据文件
  这样就可以解决上文提到的部分写失效的问题，因为在磁盘共享表空间中已有数据页副本拷贝，如果数据库在页写入数据文件的过程中宕机，在实例恢复时，可以从共享表
  空间中找到该页副本，将其拷贝覆盖原有的数据页，再应用重做日志即可。
3.自适应哈希索引/ahi
InnoDB存储引擎会监控对表上索引的查找，如果观察到建立哈希索引可以带来速度的提升，则建立哈希索引，所以称之为自适应（adaptive）的。
自适应哈希索引通过缓冲池的B+树构造而来，因此建立的速度很快。而且不需要将整个表都建哈希索引。
4.预读/read ahead
InnoDB 提供了两种预读的方式，
一种是 Linear read ahead，由参数innodb_read_ahead_threshold控制，当你连续读取一个 extent 的 threshold 个 page 的时候，会触发下一个 extent 64个
page的预读。
另外一种是Random read-ahead，由参数innodb_random_read_ahead控制，当你连续读取设定的数量的page后，会触发读
取这个extent的剩余page。
