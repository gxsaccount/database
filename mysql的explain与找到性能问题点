慢查询：让MySQL记录下查询超过指定时间的语句，我们将超过指定时间的SQL语句查询称为“慢查询”。

查找慢查询，用explain 去看详细信息

MySQL执行计划调用方式
1.EXPLAIN SELECT ……
变体：
2.EXPLAIN EXTENDED SELECT ……
将执行计划"反编译"成SELECT语句，运行SHOW WARNINGS
可得到被MySQL优化器优化后的查询语句
3.EXPLAIN PARTITIONS SELECT ……
用于分区表的EXPLAIN生成QEP的信息

字段中看出优化：
*type ：很重要的一列，显示了查询使用了那种类型，是否使用的索引，能反映出语句的质量。一般这个指标从好到坏依次是：system>const>eq_ref>ref(最好能达
  到)>fulltext>ref_or_null>index_merge>unique_subquery>index_subquery>range>index>ALL
  为了保证查询至少达到range级别。最好达到ref，否则的话，只能说明这条语句性能有待提高。
    ref 表示所有具有匹配的索引的行都被用到
    range索引范围内查找
    index全索引树扫描
    *all全表扫描
*key： 实际使用的索引。如果为NULL，则没有使用索引。很少的情况下，MYSQL会选择优化不足的索引。这种情况下，可以在SELECT语句中使用USE 
该列包含MySQL解决查询的详细信息
    Distinct:MySQL发现第1个匹配行后,停止为当前的行组合搜索更多的行。
    Not exists:MySQL能够对查询进行LEFT JOIN优化,发现1个匹配LEFT JOIN标准的行后,不再为前面的的行组合在该表内检查更多的行。
    range checked for each record (index map: #):MySQL没有发现好的可以使用的索引,但发现如果来自前面的表的列值已知,可能部分索引可以使用。
    *Using filesort:MySQL需要额外的一次传递,以找出如何按排序顺序检索行。MYSQL需要进行额外的步骤来发现如何对返回的行排序。它根据连接类型以及存储排
序键值和匹配条件的全部行的行指针来排序全部行
    Using index:从只使用索引树中的信息而不需要进一步搜索读取实际的行来检索表中的列信息。
    Using temporary:为了解决查询,MySQL需要创建一个临时表来容纳结果。这通常发生在对不同的列集进行ORDER BY上，而不是GROUP BY上
    *Using where:WHERE 子句用于限制哪一个行匹配下一个表或发送到客户。
    Using sort_union(...), Using union(...), Using intersect(...):这些函数说明如何为index_merge联接类型合并索引扫描。
    Using index for group-by:类似于访问表的Using index方式,Using index for group-by表示MySQL发现了一个索引,可以用来查 询GROUP BY或
 DISTINCT查询的所有列,而不要额外搜索硬盘访问实际的表。



